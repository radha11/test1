stages:
  - test
  - build
  - deploy feature
  # - automated feature testing
  - deploy staging
  - automated_testing
  - deploy production

variables:
  IMAGE_TAG: $CI_REGISTRY_IMAGE/employee-image:$CI_COMMIT_SHORT_SHA
  STAGING_APP: emp-portal-stage-7dbea753a141
  STAGING_DOMAIN: emp-portal-stage
  PRODUCTION_APP: emp-portal-prd-88aa563ea924
  PRODUCTION_DOMAIN: emp-portal-prd
  HEROKU_STAGING: "registry.heroku.com/$STAGING_DOMAIN/web"
  HEROKU_PRODUCTION: "registry.heroku.com/$PRODUCTION_DOMAIN/web"

lint-test:
  image: python:3.8.0-slim
  stage: test
  before_script:
    - pip install flake8-html 
  script:  
    - flake8 --format=html --htmldir=flake_reports/
  artifacts:
    when: always
    paths: 
      - flake_reports/

pytest:
  image: python:3.8.0-slim
  stage: test
  before_script:
    - pip install pytest-html
    - pip install -r requirements.txt
  script:  
    - pytest --html=pytest_reports/pytest-report.html --self-contained-html
  artifacts:
    when: always
    paths: 
      - pytest_reports/

build:
  image: docker:latest
  services:
    - docker:dind
  stage: build
  before_script: 
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $IMAGE_TAG .
    - docker images
    - docker push $IMAGE_TAG

deploy_feature:
  image: docker:latest
  services:
    - docker:dind
  stage: deploy feature
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://$CI_ENVIRONMENT_SLUG.herokuapp.com/
    on_stop: stop_feature
  before_script:
    - export FEATURE_APP="$CI_ENVIRONMENT_SLUG"
    - export HEROKU_FEATURE="registry.heroku.com/$FEATURE_APP/web"
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "FEATURE_APP=$CI_ENVIRONMENT_SLUG" >> deploy_feature.env
    - docker pull $IMAGE_TAG
    - echo $HEROKU_FEATURE
    - echo $FEATURE_APP
    - docker tag  $IMAGE_TAG $HEROKU_FEATURE
    - docker run --rm -e HEROKU_API_KEY=$HEROKU_STAGING_API_KEY wingrunr21/alpine-heroku-cli create $FEATURE_APP
    - docker login -u _ -p $HEROKU_STAGING_API_KEY registry.heroku.com
    - docker push $HEROKU_FEATURE
    - docker run --rm -e HEROKU_API_KEY=$HEROKU_STAGING_API_KEY wingrunr21/alpine-heroku-cli container:release web --app $FEATURE_APP
    - echo "App deployed to FEATURE server at https://$FEATURE_APP.herokuapp.com/"
  artifacts:
    reports:
      dotenv: deploy_feature.env
  only:
    - /^feature-.*$/

stop_feature:
  image: docker:latest
  services:
    - docker:dind
  stage: deploy feature
  variables:
    GIT_STRATEGY: none
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  before_script:
    - export FEATURE_APP="$CI_ENVIRONMENT_SLUG"
  script:
   - docker run --rm -e HEROKU_API_KEY=$HEROKU_STAGING_API_KEY wingrunr21/alpine-heroku-cli apps:destroy --app $FEATURE_APP --confirm $FEATURE_APP
   - echo "Feature application at server at https://$FEATURE_APP.herokuapp.com/ is destroyed"
  when: manual

# test_feature:
#   image: alpine
#   stage: automated feature testing
#   before_script:
#     - apk --no-cache add curl
#   script:
#     - curl https://$FEATURE_APP-b544e7a07454.herokuapp.com/ | grep "Employee Data"
#   dependencies:
#     - deploy_feature
#   only:
#     - /^feature-.*$/
  
.job_template: &template
  image: docker:latest
  services:
    - docker:dind
  environment:
    url: https://$APP.herokuapp.com/
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $IMAGE_TAG
    - docker tag $IMAGE_TAG $HEROKU
    - docker login -u _ -p $HEROKU_API_KEY registry.heroku.com
    - docker push $HEROKU
    - docker run --rm -e HEROKU_API_KEY=$HEROKU_API_KEY wingrunr21/alpine-heroku-cli container:release web --app $DOMAIN
    - echo "App deployed to https://$APP.herokuapp.com/"
  only:
    - main
  

deploy_stage:
  <<: *template 
  stage: deploy staging
  variables:
    APP: $STAGING_APP
    HEROKU_API_KEY: $HEROKU_STAGING_API_KEY
    HEROKU: $HEROKU_STAGING
    DOMAIN: $STAGING_DOMAIN
  environment: 
    name: staging
  
test_stage:
  image: alpine
  stage: automated_testing
  before_script:
    - apk --no-cache add curl
  script:
    - curl https://$STAGING_APP.herokuapp.com/ | grep "Employee Data"
  only:
    - main

deploy_production:
  <<: *template
  stage: deploy production
  variables:
    APP: $PRODUCTION_APP
    HEROKU_API_KEY: $HEROKU_PRODUCTION_API_KEY
    HEROKU: $HEROKU_PRODUCTION
    DOMAIN: $PRODUCTION_DOMAIN
  environment: 
    name: production
  when: manual